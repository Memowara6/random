/*RWD utilizando, la unidad relativa, porcentaje*/
p{
    background-color: black;
    color: aliceblue;
    margin:  0 auto;
    width: 75%;
    min-width: 320px;
}

/*
RWD utilizando em
La unidad relativa em es utilizado para componentes internos de un elemenato
Por ejemplo: En la confeccion de un botton
1em = 100% de la fuente del contexto
El contexto son aquellos elementos por arriba de la jerarquia (Padre, abuelos, bisabuelos, etc...)
*/

/*
*Las unidades de viewport se pueden utilizar para organizar el header, main y footer de la pagina
*Hay que tener cuidado con utilizar el 100vw por el tema de un posible scroll
*Para solucionar ese inconveniente es necesario utilizar js y una variable en css
*/
:root{
    --scroll-bar: 17px
}
body{
    width: calc(100vw - var(--scroll-bar));
    margin: 0;
    display: flex;
    flex-direction: column;
}
header{
    background-color: blue;
    color: white;
    min-height: 10vh;
}
main{
    background-color: brown;
    min-height: 80vh;
}
div{
    font-size: 20px;
}

button{
    font-size: 2em;
    border-radius: .5em;
    background-color: cadetblue;
    color: black;
    padding: 1.5em 1.5em;
}

/*
*Flex Box es un concepto ya conocido, por ende no fue introducido en este archivo
*/
.container{
    display: flex;
    flex-wrap: wrap;
    background-color: #5f5959;
}

.item{
    flex: 0 1 100px;
    font-size: 2rem;
    margin: .5em;
}
/*
* GRID es la forma por defecto de organizar elementos en un espacio de manera ordenada
* La ventaja conrespecto a Flex es es que la separaci√≥n (gap) solo sera entre los elementos hermanos (Aquellos que
    *estan dentro del padre)
*/

.contenedor{
    display: grid;
    grid-gap: .5em;
    background-color: aquamarine;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    margin-top: 2rem;
}

.elemento{
    background-color: black;
    color: white;
}
footer{
    background-color: #ddd;
    height: 10vh;
}
